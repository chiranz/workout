{"version":3,"sources":["components/layout/Header.js","components/layout/Footer.js","actions/types.js","components/Exercises/LeftPane.js","components/Exercises/RightPane.js","components/Exercises/index.js","constant.js","reducers/exerciseReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Header","style","flexGrow","AppBar","position","Toolbar","Typography","variant","Button","color","Footer","useSelector","state","exercises","muscles","category","dispatch","useDispatch","index","findIndex","group","Paper","Tabs","value","indicatorColor","textColor","centered","onChange","_","type","payload","Tab","label","map","muscle","key","LeftPane","styles","exercise","textTransform","List","component","aria-label","item","ListItem","button","onClick","handleClick","ListItemText","primary","title","RightPane","Object","keys","length","description","marginTop","padding","margin","height","overflowY","Grid","container","sm","id","initialState","entries","reduce","musclesList","includes","push","loading","combineReducers","action","devTools","window","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","rootReducer","App","Exercises","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mRAMe,SAASA,IACtB,OACE,yBAAKC,MAAO,CAAEC,SAAU,IACtB,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKN,MAAO,CAAEC,SAAU,IAA5C,aAGA,kBAACM,EAAA,EAAD,CAAQC,MAAM,WAAd,Y,4BCTK,SAASC,IAAU,IAAD,EACDC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,aAAjDC,EADuB,EACvBA,QAASC,EADc,EACdA,SACXC,EAAWC,cACXC,EACS,KAAbH,EAAkB,EAAID,EAAQK,WAAU,SAAAC,GAAK,OAAIA,IAAUL,KAAY,EAQzE,OACE,kBAACM,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,MAAOL,EACPM,eAAe,UACfC,UAAU,UACVC,UAAQ,EACRC,SAde,SAACC,EAAGV,GACvB,IAAMH,EAAWD,EAAQI,EAAQ,GACjCF,EAAS,CACPa,KCRyB,kBDSzBC,QAASf,MAYP,kBAACgB,EAAA,EAAD,CAAKC,MAAM,QACVlB,EAAQmB,KAAI,SAACC,EAAQhB,GAAT,OACX,kBAACa,EAAA,EAAD,CAAKI,IAAKjB,EAAOc,MAAOE,S,4CEjBnB,SAASE,EAAT,GAA+B,IAAXC,EAAU,EAAVA,OAAU,EACX1B,aAAY,SAAAC,GAAK,OAAIA,EAAMC,aAAnDA,EADmC,EACnCA,UAAWE,EADwB,EACxBA,SACbC,EAAWC,cAQjB,OACE,kBAACI,EAAA,EAAD,CAAOpB,MAAOoC,EAAOhB,OAClBR,EAAUoB,KAAI,WAAoBf,GAApB,uBAAEE,EAAF,KAASkB,EAAT,YACZvB,GAAYA,IAAaK,EAatB,KAZF,yBAAKe,IAAKjB,GACR,kBAACZ,EAAA,EAAD,CAAYC,QAAQ,KAAKN,MAAO,CAAEsC,cAAe,eAC9CnB,GAEH,kBAACoB,EAAA,EAAD,CAAMC,UAAU,KAAKC,aAAW,mBAC7BJ,EAASL,KAAI,SAACU,EAAMzB,GAAP,OACZ,kBAAC0B,EAAA,EAAD,CAAUC,QAAM,EAACV,IAAKjB,EAAO4B,QAAS,kBAjBhC,SAAAH,GAClB3B,EAAS,CACPa,KDVyB,kBCWzBC,QAASa,IAc6CI,CAAYJ,KACtD,kBAACK,EAAA,EAAD,CAAcC,QAASN,EAAKO,kBC5B/B,SAASC,EAAT,GAAgC,IAAXd,EAAU,EAAVA,OAC9BC,EAAW3B,aAAY,SAAAC,GAAK,OAAIA,EAAMC,UAAUyB,YAKpD,OAJKc,OAAOC,KAAKf,GAAUgB,SACzBhB,EAASY,MAAQ,WACjBZ,EAASiB,YAAc,4CAGvB,kBAAClC,EAAA,EAAD,CAAOpB,MAAOoC,EAAOhB,OACnB,kBAACf,EAAA,EAAD,CAAYC,QAAQ,MAAM+B,EAASY,OACnC,kBAAC5C,EAAA,EAAD,CAAYC,QAAQ,QAAQN,MAAO,CAAEuD,UAAW,KAC7ClB,EAASiB,cCTlB,IAAMlB,EAAS,CACbhB,MAAO,CACLoC,QAAS,GACTC,OAAQ,GACRC,OAAQ,IACRC,UAAW,SAIA,aACb,OACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAMlB,MAAI,EAACoB,IAAE,GACX,kBAAC3B,EAAD,CAAUC,OAAQA,KAGpB,kBAACwB,EAAA,EAAD,CAAMlB,MAAI,EAACoB,IAAE,GACX,kBAACZ,EAAD,CAAWd,OAAQA,O,wBCtBdxB,EAAY,CACvB,CACEmD,GAAI,iBACJd,MAAO,iBACPK,YAAa,oBACbzC,QAAS,aAEX,CACEkD,GAAI,OACJd,MAAO,OACPK,YAAa,sBACbzC,QAAS,QAEX,CACEkD,GAAI,gBACJd,MAAO,gBACPK,YAAa,qBACbzC,QAAS,QAEX,CACEkD,GAAI,cACJd,MAAO,cACPK,YAAa,oBACbzC,QAAS,SAEX,CACEkD,GAAI,WACJd,MAAO,WACPK,YAAa,8BACbzC,QAAS,QAEX,CACEkD,GAAI,YACJd,MAAO,YACPK,YAAa,2BACbzC,QAAS,QAEX,CACEkD,GAAI,SACJd,MAAO,SACPK,YAAa,mBACbzC,QAAS,SCbPmD,EAAe,CACnBpD,UArBOuC,OAAOc,QACZrD,EAAUsD,QAAO,SAACtD,EAAWyB,GAAc,IACjCxB,EAAYwB,EAAZxB,QAIR,OAHAD,EAAUC,GAAWD,EAAUC,GAAV,sBACbD,EAAUC,IADG,CACOwB,IACxB,CAACA,GACEzB,IACN,KAeLC,QAVOD,EAAUsD,QAAO,SAACC,EAAa9B,GAAc,IAC1CxB,EAAYwB,EAAZxB,QAIR,OAHKsD,EAAYC,SAASvD,IACxBsD,EAAYE,KAAKxD,GAEZsD,IACN,IAKHG,SAAS,EACTxD,SAAU,GACVuB,SAAU,IC9BGkC,cAAgB,CAC7B3D,UDgCa,WAAwC,IAA/BD,EAA8B,uDAAtBqD,EAAcQ,EAAQ,uCACpD,OAAQA,EAAO5C,MACb,ILtCyB,gBKuCvB,OAAO,eACFjB,EADL,CAEEC,UAAW4D,EAAO3C,UAEtB,ILtC2B,kBKuCzB,OAAO,eACFlB,EADL,CAEEG,SAAU0D,EAAO3C,UAErB,IL1C2B,kBK2CzB,OAAO,eACFlB,EADL,CAEE0B,SAAUmC,EAAO3C,UAErB,QACE,OAAOlB,MEnDP8D,EACJC,OAAOC,8BAAgCD,OAAOC,+BAIjCC,EAFDC,YAAYC,EAAaL,GCUxBM,MAVf,WACE,OACE,kBAAC,IAAD,CAAUH,MAAOA,GACf,kBAAC7E,EAAD,MACA,kBAACiF,EAAD,MACA,kBAACvE,EAAD,QCCcwE,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f3f5c3e7.chunk.js","sourcesContent":["import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\n\nexport default function Header() {\n  return (\n    <div style={{ flexGrow: 1 }}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" style={{ flexGrow: 1 }}>\n            Exercises\n          </Typography>\n          <Button color=\"inherit\">Login</Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Paper, Tabs, Tab } from \"@material-ui/core\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { CHANGE_CATEGORY } from \"../../actions/types\";\n\nexport default function Footer() {\n  const { muscles, category } = useSelector(state => state.exercises);\n  const dispatch = useDispatch();\n  const index =\n    category === \"\" ? 0 : muscles.findIndex(group => group === category) + 1;\n  const handleChange = (_, index) => {\n    const category = muscles[index - 1];\n    dispatch({\n      type: CHANGE_CATEGORY,\n      payload: category\n    });\n  };\n  return (\n    <Paper>\n      <Tabs\n        value={index}\n        indicatorColor=\"primary\"\n        textColor=\"primary\"\n        centered\n        onChange={handleChange}\n      >\n        <Tab label=\"All\" />\n        {muscles.map((muscle, index) => (\n          <Tab key={index} label={muscle} />\n        ))}\n      </Tabs>\n    </Paper>\n  );\n}\n","export const GET_EXERCISES = \"GET_EXERCISES\";\nexport const ADD_EXERCISE = \"ADD_EXERCISE\";\nexport const EDIT_EXERCISE = \"EDIT_EXERCISE\";\nexport const DELETE_EXERCISE = \"DELETE_EXERCISE\";\nexport const LOADING_EXERCISES = \"LOADING_EXERCISES\";\nexport const CHANGE_CATEGORY = \"CHANGE_CATEGORY\";\nexport const CHANGE_EXERCISE = \"CHANGE_EXERCISE\";\n","import React from \"react\";\nimport {\n  Paper,\n  Typography,\n  List,\n  ListItem,\n  ListItemText\n} from \"@material-ui/core\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { CHANGE_EXERCISE } from \"../../actions/types\";\n\nexport default function LeftPane({ styles }) {\n  const { exercises, category } = useSelector(state => state.exercises);\n  const dispatch = useDispatch();\n  const handleClick = item => {\n    dispatch({\n      type: CHANGE_EXERCISE,\n      payload: item\n    });\n  };\n\n  return (\n    <Paper style={styles.Paper}>\n      {exercises.map(([group, exercise], index) =>\n        !category || category === group ? (\n          <div key={index}>\n            <Typography variant=\"h6\" style={{ textTransform: \"capitalize\" }}>\n              {group}\n            </Typography>\n            <List component=\"ul\" aria-label=\"exercise-titles\">\n              {exercise.map((item, index) => (\n                <ListItem button key={index} onClick={() => handleClick(item)}>\n                  <ListItemText primary={item.title} />\n                </ListItem>\n              ))}\n            </List>\n          </div>\n        ) : null\n      )}\n    </Paper>\n  );\n}\n","import React from \"react\";\nimport { Paper, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\n\nexport default function RightPane({ styles }) {\n  let exercise = useSelector(state => state.exercises.exercise);\n  if (!Object.keys(exercise).length) {\n    exercise.title = \"Welcome!\";\n    exercise.description = \"Please select an exercise from the left!\";\n  }\n  return (\n    <Paper style={styles.Paper}>\n      <Typography variant=\"h4\">{exercise.title}</Typography>\n      <Typography variant=\"body1\" style={{ marginTop: 20 }}>\n        {exercise.description}\n      </Typography>\n    </Paper>\n  );\n}\n","import React from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport LeftPane from \"./LeftPane\";\nimport RightPane from \"./RightPane\";\n\nconst styles = {\n  Paper: {\n    padding: 20,\n    margin: 10,\n    height: 400,\n    overflowY: \"auto\"\n  }\n};\n\nexport default function() {\n  return (\n    <Grid container>\n      <Grid item sm>\n        <LeftPane styles={styles} />\n      </Grid>\n\n      <Grid item sm>\n        <RightPane styles={styles} />\n      </Grid>\n    </Grid>\n  );\n}\n","export const exercises = [\n  {\n    id: \"overhead-press\",\n    title: \"Overhead Press\",\n    description: \"Delts exercise...\",\n    muscles: \"shoulders\"\n  },\n  {\n    id: \"dips\",\n    title: \"Dips\",\n    description: \"Triceps exercise...\",\n    muscles: \"arms\"\n  },\n  {\n    id: \"barbell-curls\",\n    title: \"Barbell Curls\",\n    description: \"Biceps exercise...\",\n    muscles: \"arms\"\n  },\n  {\n    id: \"bench-press\",\n    title: \"Bench Press\",\n    description: \"Chest exercise...\",\n    muscles: \"chest\"\n  },\n  {\n    id: \"pull-ups\",\n    title: \"Pull Ups\",\n    description: \"Back and biceps exercise...\",\n    muscles: \"back\"\n  },\n  {\n    id: \"deadlifts\",\n    title: \"Deadlifts\",\n    description: \"Back and leg exercise...\",\n    muscles: \"back\"\n  },\n  {\n    id: \"squats\",\n    title: \"Squats\",\n    description: \"Legs exercise...\",\n    muscles: \"legs\"\n  }\n];\n","import {\n  GET_EXERCISES,\n  CHANGE_CATEGORY,\n  CHANGE_EXERCISE\n} from \"../actions/types\";\nimport { exercises } from \"../constant\";\n\nconst getExercisesByMuscles = () => {\n  return Object.entries(\n    exercises.reduce((exercises, exercise) => {\n      const { muscles } = exercise;\n      exercises[muscles] = exercises[muscles]\n        ? [...exercises[muscles], exercise]\n        : [exercise];\n      return exercises;\n    }, {})\n  );\n};\n\nconst getMuscles = () => {\n  return exercises.reduce((musclesList, exercise) => {\n    const { muscles } = exercise;\n    if (!musclesList.includes(muscles)) {\n      musclesList.push(muscles);\n    }\n    return musclesList;\n  }, []);\n};\nconst initialState = {\n  exercises: getExercisesByMuscles(),\n  muscles: getMuscles(),\n  loading: false,\n  category: \"\",\n  exercise: {}\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case GET_EXERCISES:\n      return {\n        ...state,\n        exercises: action.payload\n      };\n    case CHANGE_CATEGORY:\n      return {\n        ...state,\n        category: action.payload\n      };\n    case CHANGE_EXERCISE:\n      return {\n        ...state,\n        exercise: action.payload\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport exerciseReducer from \"./exerciseReducer\";\n\nexport default combineReducers({\n  exercises: exerciseReducer\n});\n","import { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\n\nconst devTools =\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\n\nconst store = createStore(rootReducer, devTools);\n\nexport default store;\n","import React from \"react\";\nimport \"./App.css\";\nimport { Provider } from \"react-redux\";\nimport { Header, Footer } from \"./components/layout\";\nimport Exercises from \"./components/Exercises\";\nimport store from \"./store\";\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Header />\n      <Exercises />\n      <Footer />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}